#!/bin/bash

# RUN AS ROOT DURING SETUP
if [[ $(/usr/bin/id -u) -ne 0 ]] 
then
    echo "CRITICAL ERROR: Not running as root"
    exit
fi

# PATH TO CONFIG FILE IN "/etc/sysctl.d/"
kernelConfig="/etc/sysctl.d/net.conf"

# Lines to be added to config
arpFilter="net.ipv4.conf.all.arp_filter=1"
rpFilter="net.ipv4.conf.all.rp_filter=2"
arpAnnounce="net.ipv4.conf.all.arp_announce=1"
arpIgnore="net.ipv4.conf.all.arp_ignore=1"

# setting variables for crontab run
echo "Enter the minute frequency to tweet when the Wifi goes down:"
read minutes
while ! ( [ "$minutes" -eq "$minutes" ] && [ "$minutes" -gt 10 ] && [ "$minutes" -lt 240 ] ) 2>/dev/null
do
   echo "Minutes variable invalid."
   echo "Enter a minutes value between 10 and 240" 
   read minutes
done

crontabNormal="*/$minutes * * * * cd /usr/local/projects/wifi_connectivity_bot && ./wifiConnBot_run.py 1"
echo "$crontabNormal"
crontabSummary="0 12 * * 7 cd /usr/local/projects/wifi_connectivity_bot && ./wifiConnBot_run.py 0"

# sets kernel variables to allow for connections
# through two different interfaces.
set_kernel()
{
   if grep -q "$1" $kernelConfig;
   then
      echo "$1" >> $kernelConfig
   fi
}

# creates crontab lines
crontab_lines()
{
   echo $(crontab -l ; echo "$1") | crontab - 
}

# FIND WAY TO ACCEPT USER INPUT FOR RUN FREQUENCY
crontab_lines $crontabNormal
crontab_lines $crontabSummary

touch $kernelConfig

set_kernel $arpFilter
set_kernel $rpFilter
set_kernel $arpAnnounce
set_kernel $arpIgnore

# sets system to shutdown in one minute
#/sbin/shutdown -r -h +1
# deletes setup file
#rm initial_config
